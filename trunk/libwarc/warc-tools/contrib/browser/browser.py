# -------------------------------------------------------------------  ## Copyright (c) 2007-2008 Hanzo Archives Limited.                      ##                                                                      ## Licensed under the Apache License, Version 2.0 (the "License");      ## you may not use this file except in compliance with the License.     ## You may obtain a copy of the License at                              ##                                                                      ##     http://www.apache.org/licenses/LICENSE-2.0                       ##                                                                      ## Unless required by applicable law or agreed to in writing, software  ## distributed under the License is distributed on an "AS IS" BASIS,    ## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or      ## implied.                                                             ## See the License for the specific language governing permissions and  ## limitations under the License.                                       ##                                                                      ## You may find more information about Hanzo Archives at                ##                                                                      ##     http://www.hanzoarchives.com/                                    ##                                                                      ## You may find more information about the WARC Tools project at        ##                                                                      ##     http://code.google.com/p/warc-tools/                             ## -------------------------------------------------------------------  #import wpathimport webfrom web import cheetahfrom urllib import unquote_plusfrom index.keypath import keypath from index.timetools import getDisplayTimefrom warcutils import getRecordfrom rewrite import makeAccessibleindex = Nonedef getparams( s ):    ret = {}    items = s.split('&')    for item in items:        if '=' in item:            bits = item.split('=')            key = bits[0]             value = unquote_plus( ''.join( bits[1: ] ))            ret[key] = value    return ret            urls = ( '/'  , 'frontpage'  ,          '/archive/(.*?)/(.*)' , 'archive' ) class frontpage(object):    def GET( self ):        cheetah.render( 'index.tmpl' )class query(object):    def GET(self):        print 'there'    def POST( self ):        print 'here' ,        print  getparams(web.data())        def doSearchResults( url ):            r =  index.search( keypath( url ))    if len(r):        results = [ x.split()[1] for x in r ]        years = []        yearresults = {}         for res in results:            year = res[:4]            if year not in years:                years.append( year )                yearresults[ year ] = [ ( res , getDisplayTime(res )) ]            else:                yearresults[ year ].append(( res , getDisplayTime(res )))        yearresults["years"] = years            cheetah.render( 'searchresults.tmpl' , { 'url': url , 'results': yearresults } )                          else:        cheetah.render( 'nosearchresults.tmpl' );                    class archive( object ):    def GET( self , timestamp , url ):        r = web.ctx['fullpath']        url = r[ r.find('archive') + len('archive') + 2 + len( timestamp ) :]        if index is not None:            if '*' in timestamp:                doSearchResults( url )                            else:                item = index.get( timestamp , keypath( url ))                if item is not None:                    bits = [x for x in item.split(' ' ) if x.strip() != '' ]                    mimetype = bits[2]                    status = bits[3]                    offset = bits[4]                    redirect = bits[5]                    warcn = bits[6]                    ( headers , content ) = getRecord( warcn , offset )                    print makeAccessible( mimetype , url , timestamp , content )                def my_notfound():     cheetah.render( '404.tmpl' );          def browse( idx  ):    global index     index = idx    fn = web.webpyfunc( urls , globals() )    web.webapi.notfound = my_notfound    web.runsimple( web.wsgifunc(fn ))