<?xml version='1.0' encoding="ISO-8859-15" ?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
 "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<book lang="en">
<title> warc-tools version 0.18  A library for data archiving </title>
<chapter id= "introduction">
  <title> introduction </title>
  <para>
  The warc-tools is a library containing a set of functions that allow to store data and retrieve them from WARC files. A WARC file is an archive file stored in the WARC (Web ARChive) format. It is a concatenation of several data block where each one is  encapsulated with a text header containing information about the data block itself and/or about the WARC file containing it. An encapsulated data block is then called a WARC Record. Thus, with the warc-tools library, we have access to functions that will permit us to create WARC Records from a given data file that we want to archive, and also to store it in an existing or a new WARC file. In addition, we have access to an other kind of functions that will allow us to retrieve WARC Records from an existing WARC file and to extract the data stored in it.
   </para>
   <para>
   Also, this library allows us to access and read file stored respecting the old ARC archiving format, from which the WARC format was born. It offers functions to access
   records stored in such files and retrieve the data blocks they contain too.
   </para>
   <para>
   In the following, we give a description of every application and function offered with the warc-tools to the user in order to archive data in the
   WARC format, to retrieve WARC Records stored in a WARC file, or, if he has archives in the ARC format, we describe how to use our own ARC files reader to get their data.
  </para>
  <para>
  This document is composed into three parts :
  <itemizedlist>
	<listitem>
		<para> 
                How to use  warc-tools : describes how to use warc-tools applications, this is the only part you need
                you just know how to run these programs.
                </para>
	</listitem>
	<listitem>
		<para>
				Detailed utilisation : describes in more details the utilisation of the applications by  simple
                 examples.
                </para>
	</listitem>
        <listitem>
		<para>
                Programming with the warc-tools library : describes how to use libwarc functions which the library provides for development. 
                </para>
	</listitem>					
        </itemizedlist>
   </para>
</chapter>
<chapter id="chapter2">
	<title> How to use warc-tools</title>
	<para>
        This chapter contains a copy of warc-tools man page, and nothing else.
        </para>
        <sect1>
        <title> NAME </title>
        <para>
        <itemizedlist>
	<listitem>
		<para> warcdump - dumps a WARC file </para>
	</listitem>
	<listitem>
		<para> arc2warc - ARC to WARC converter </para>
	</listitem>
        <listitem>
		<para> arc2warc.sh - converts all WARC files in directory to WARC files </para>
	</listitem>
	<listitem>
		<para> warcfilter - filters WARC Record based on Uri, content type or record type </para>
	</listitem>						
        <listitem>
		<para> warcvalidator - checks WARC file consistency  </para>
	</listitem>
	<listitem>
		<para> warcvalidator.sh - checks if all WARC file in directory are valid  </para>
	</listitem>
          <listitem>
		<para> warcserver - starts the WARC server  </para>
	</listitem>
	<listitem>
		<para> warcclient - to access remote WARC resource  </para>
	</listitem>			
        </itemizedlist>
        </para>
	</sect1>
        <sect1>
	<title> SYNOPSIS </title>
	<para>
        <itemizedlist>
	<listitem>
		<synopsis> warcdump -f {file.warc} [-v] [-t {working_dir}] </synopsis>
	</listitem>
	<listitem>
		<synopsis> arc2warc -a {file.arc} -f {file.warc} [-c] [-t {working_dir}] </synopsis>
	</listitem>
        <listitem>
		<synopsis> arc2warc.sh -d {dirname} [-b] [-c] [-t {working_dir}] [-v] [-h]  </synopsis>
	</listitem>
	<listitem>
		<synopsis> warcfilter -f {file.warc} [-u {uri}] [-m {mime}] [-r {rtype}] 
                          [-v] [-t {working_dir}]  </synopsis>
	</listitem>						
        <listitem>
		<synopsis> warcvalidator -f {file.warc} [-v] [-t {working_dir}]  </synopsis>
	</listitem>
	<listitem>
		<synopsis> warcvalidator.sh -d {dirname} [-t {working_dir}] [-v] [-h]   </synopsis>
	</listitem>
          <listitem>
		<synopsis> warcserver -i {ip} -p {port} -x {prefix} [-s {name}] [-t {working_dir}]   </synopsis>
	</listitem>
	<listitem>
		<synopsis> 
                warcclient -i {ip} -p {port} -t {remote_warc} -o {local_warc} -s {server_name} 
                [-f {offset}] -[u {uri_pattern}] [-n {content_type_pattern}] 
                [-d {record_type_string}] [-c] [-r] 
                </synopsis>
	</listitem>			
        </itemizedlist>
        </para>
	</sect1>
        <sect1>
	<title> DESCRIPTION </title>
	<para>
<literallayout> 
<command>warcdump</command> :  lists  the header's fields of all WARC Records in a WARC file.  
</literallayout> 
        warcdump looks down the records of WARC file one by one, extracts header fields of
        the current record and displays their values in the screen.
        </para>
        <para>
<literallayout>
<command>arc2warc</command> : converts an ARC file into a WARC file.
</literallayout>  
        arc2warc creates a new WARC file initially empty,  looks down the records of the ARC file one
        by one, extracts  current ARC record, converts it into a WARC
        Record and stores this last one in a WARC file.
        </para>
        <para>
        <command>arc2warc.sh</command> : converts all ARC files into WARC files in a directory by calling the arc2warc command
        described previously for each ARC file in the current directory.
        </para>
        <para>
        <command>warcfilter</command> : lists like warcdump the headers fields of WARC Records present in a WARC
        file but only those that are corresponding to the filter value. The filter can be used on the WARC-Subject-Uri field (if existing),
		on the Content-Type field or on the WARC-Type field.
        </para>
        <para>
        <command>warcvalidator</command> : checks  if a WARC file is valid or not. A WARC file must follow a
        specific grammar. This grammar can be found the following address :
        <ulink url="http://www.digitalpreservation.gov/formats/fdd/fdd000236.shtml"></ulink>
        </para>
        <para>
        <command>warcvalidator.sh</command> : checks if all WARC files in a directory are valid or not. It
        calls the warcvalidator command described previously for each WARC file in the directory.
        </para>
        <para>
        <command>warcserver</command> : a WARC server that allows to satisfy requests on WARC files contained on a specific directory. 
		there are four kinds of requests:
		<itemizedlist>
		 	<listitem> 
				<para> A whole WARC file transfer request. </para>
			</listitem>
			<listitem> 
				<para> A lonely WARC Record transfer request. </para>
			</listitem>
			<listitem> 
				<para> A filtered WARC file transfer request.</para>
			</listitem>
			<listitem> 
				<para> A WARC file Records headers listing request.</para>
			</listitem>
		</itemizedlist>
        </para>
        <para>
        <command>warcclient</command> : allows to send request to a server for claiming warc resources.  You
        can make request  to  the WARC server described above or to Apache or lighttpd server
		but you must check that mod_apache or mod_lighttpd are correctly configured in server machine.
		Read the <filename>"/doc/install"</filename> for more details
        </para>
		<para/>
        </sect1>
        <sect1>
        <title> OPTIONS </title>
        <procedure>
        <step>
        <para>
        <command>warcdump</command> :
        </para>
          <programlisting>
           -f    : valid WARC file name 
           [-v]  : dump ANVL (default false) 
           [-t]  : temporary working directory (default ".") 
          </programlisting>
        </step>
        <step>
        <para>
        <command>arc2warc</command>
        </para>
         <programlisting>
           -a    : valid ARC file name 
           -f    : valid WARC file name 
           [-c]  : WARC file will be GZIP compressed (default no) 
           [-t]  : temporary working directory (default ".")
          </programlisting>
        </step>
        <step>
        <para>
        <command>arc2warc.sh</command>
        </para>
         <programlisting>
           -d     : directory name containing ARC files 
           -c     : WARC files will be GZIP compressed 
                    (default no) 
           -t     : temporary working directory (default ".") 
           -h     : print this help message 
           -v     : output version information and exit         
         </programlisting>
        </step>
        <step>
        <para>
        <command>warcfilter</command>
        </para>
          <programlisting>
           -f    : valid WARC file name
           [-u]  : compare with URI
           [-m]  : compare with MIME
           [-r]  : compare with record types 
		           (see "public/wrectype.h" for possible values)
           [-v]  : dump ANVL (default no)
           [-t]  : temporary working directory (default ".")
          </programlisting>
        </step>
        <step>
        <para>
        <command>warcvalidator</command>
        </para>
          <programlisting>
           -f    : valid WARC file name 
           [-v]  : verbose mode (default no) 
           [-t]  : temporary working directory (default ".") 
          </programlisting>
        </step>
        <step>
        <para>
        <command>warcvalidator.sh</command>
        </para>
         <programlisting>
           -d     : directory name containing WARC files 
           -t     : working temporary directory (default ".") 
           -h     : print this help message 
           -v     : output version information and exit 
        </programlisting>
        </step>
        <step>
        <para>
        <command>warcserver</command>
        </para>
          <programlisting>
           [-i]  : ip address 
           [-p]  : port number 
           [-x]  : directory prefix 
           [-s]  : server name (default to "iipc") 
           [-t]  : temporary working directory (default ".") 
          </programlisting>
        </step>
        <step>
        <para>
        <command>warcclient</command>
        </para>
          <programlisting>
           [-i]  : ip address 
           [-p]  : port number 
           [-s]  : server name 
           [-u]  : filter file on Record uri value 
                   (default no) 
           [-n]  : filter file on content type value
                   (default no) 
           [-d]  : filter file on Record type value 
                   (default unknown) 
           [-t]  : remote WARC filename 
           [-o]  : output WARC filename 
           [-f]  : WARC offset (default 0) 
           [-r]  : get all the WARC file (default no) 
           </programlisting>
        </step>
        </procedure>
        </sect1>
</chapter>
<chapter id= "chapter3">
  <title> Detailed utilisation </title>
  <para>
  This chapter gives more details on the use of warc-tools applications.
  </para>
  <sect1>
        <title> warcdump </title>
        <para>
       The option -f is mandatory  when we use warcdump. It is used to indicate the name of the WARC file to dump.
       </para>
       <para>
       The option -t is optional it allows to give the application working directory for temporary files creation.
	    By default working directory is the current one.
       </para>
       <para>
       The option  -v is optional. It specifies if the user wants to also get anvl fields details with the header.
       </para>
       <para>
       Her, there is two usage examples, in the first one  only the header is dumped, in the second
       both of the header and the anvl fields are dumped:
       </para>
       <example>
       <title> How to use warcdump command to get only the header. </title>
       <screen>
<prompt>users@users-desktop:~$ </prompt><userinput>warcdump -f file.warc -t /tmp/</userinput>
       </screen>
       </example>
       <example>
       <title> How to use warcdump command to get the header and the anvl fields. </title>
       <screen>
<prompt>users@users-desktop:~$ </prompt><userinput>warcdump -f file.warc -t /tmp/ -v </userinput>
       </screen>
       </example>
  </sect1>
  <sect1>
        <title> arc2warc </title>
        <para>
		The  option -a is mandatory when we use arc2warc. It is used to indicate the name of the ARC file to convert.
        </para>
        <para>
        The option -f is mandatory. It must be followed by the name of the output WARC file.
        </para>
        <para>
        The option -c is optional. If you use -c, the resulting WARC file is generated compressed following the gzip format.
		By default, the WARC file is not generated commpressed. The WARC file mode of
        compression is independent of ARC file mode of compression, the user has to
        choose the method of compression.
        </para>
        <para>
		The option -t is optional it allows to give the application work directory for temporary files creation.
	    By default worker directory is the current one.
        </para>
        <para>
        For the generation of an uncompressed WARC file <filename>"file.warc"</filename> from an ARC file <filename>"file.arc"</filename>, we can use
        the following command shown in this example :
        </para>
        <example>
        <title> How to use the arc2warc command for the conversion of an ARC file into an uncompressed WARC file.</title>
        <screen>
<prompt>users@users-desktop:~$ </prompt><userinput>arc2warc -a file.arc -f file.warc -t /tmp/</userinput>
        </screen>
        </example>
        <para>
        For the generation of a compressed WARC file <filename>"file.warc.gz"</filename>"from the same ARC file :
        </para>
        <example>
        <title> How to use the arc2warc command for the conversion of an ARC file into a compressed WARC file. </title>
        <screen>
<prompt>users@users-desktop:~$ </prompt><userinput>arc2warc -a file.arc -f file.warc -t /tmp/ -c</userinput>
        </screen>
        </example>
        <para>
        arc2warc.sh is shell script used to convert all ARC files in a directory to WARC files.
        The option of this command are similar to the arc2warc options, except that  the option
        -d  is added to indicates the directory where the ARC file are stored. We do not use  -f and -a options in this case.
		The resulting WARC files will have the same names of their origin ARC file but with the extension ".warc" instead of ".arc".
		In the case when we reclaim a compressed output, the extension ".gz" will be added to the end of each WARC file name.
        </para>
        <para>
        An example of utilisation of this command while passing the directory <filename>"/tmp/file"</filename> as input is :
        </para>
        <example>
        <title> How to use arc2warc.sh command. </title>
        <screen>
<prompt>users@users-desktop:~$ </prompt><userinput>arc2warc.sh -d /tmp/file -t /tmp/</userinput>
        </screen>
        </example>
  </sect1>
  <sect1>
        <title> warcfilter </title>
        <para>
		The option -f is mandatory  when we use warcfilter. It is used to indicate the name of the WARC file to filter. The option -v and -t
        are as described previously.
        </para>
        <para>
		The option -u  is to be used if we want to apply its argument as a filter on the WARC-Target-URI fields, if existing, of the WARC Records.
        </para>
        <para>
        The option -m  is to be used if we want to apply its argument as a filter on the Content-Type fields of the WARC Records.
        </para>
        <para>
		The option -r  is to be used if we want to apply its argument as a filter on the WARC-Type fields of the WARC Records.
        which represents the filter.
        </para>
        <para>
        In The following example, we dump headers fields of a WARC file using warcfilter, passing the filter "http:" to be applied to uri field.
        </para>
        <example>
        <title> How to use warcfilter command (usage of filter on WARC-Target-URI fields). </title>
        <screen>
<prompt>users@users-desktop:~$ </prompt><userinput> warcfilter -f file.warc -u http: -t /tmp/</userinput>
        </screen>
        </example>
  </sect1>
  <sect1>
        <title> warcvalidator </title>
        <para>
		The option -f is mandatory  when you use warcvalidator. It is used to indicate the name of the WARC file to validate.
        </para>
        <para>
        The option  -t is optional, it is as described previously. 
        </para>
        <para>
        The option -v is different from -v options given  previously, in this case it allows
        to display a result message.
        </para>
        <para>
        The following example shows how to use the warcvalidator commad to test the validity of the WARC file  <filename>"file.warc"</filename>:
        </para>
        <example>
        <title> How to use the warcvalidator command. </title>
        <screen>
<prompt>users@users-desktop:~$ </prompt><userinput>warcvalidator -f file.warc  -v </userinput>
        </screen>
        </example>
        <para>
        warcvalidator.sh is a script shell that can validate several WARC files in a directory.
        It calls the warcvalidator command defined previously.
        The option -d in this case is used to give the directory of the WARC files. The option -v in this case only specifies the warc version.
        </para>
        <para>
        To validate all WARC files in the directory <filename>"/tmp/file"</filename>,  we can proceed as in  the following example :
        </para>
        <example>
        <title> How to use the warcvalidator.sh command. </title>
        <screen>
<prompt>users@users-desktop:~$ </prompt><userinput> warcvalidator.sh -d /file/tmp </userinput>
        </screen>
        </example>
  </sect1>
  <sect1>
        <title> warcserver </title>
        <para>
        The options -i ,-p,  -x are mandatory when we use warcserver command.
        </para>
        <para>
        The  option -i specifies  the listening IP address. When its value is 0.0.0.0 
        you can listen from any IP address.
        </para>
        <para>
        The option -p allows to define the listening port. In Unix systems we must have
        the  permissions to listen port bellow 1024.
        </para>
        <para>
        The option -x allows to define  directory where  WARC files are stored. The server will look for 
        the WARC files required by the clients in this directory.
        </para>
        <para>
        The option -t is optional, it allows to specify working directory.
        </para>
        <para>
        The option -s is optional, it is used to define a name for the server. If you do not use this option the server
        name by default is "iipc".
        </para>
        <para>
        Here, an example which shows how to start server on port 8080 that listens
        from any IP address. The WARC files in this server are in the directory <filename>"/home/warcfile"</filename>
        and we name the server by <parameter>"warc_server"</parameter>
        </para>
        <example>
        <title> How to use the warcserver command. </title>
        <screen>
<prompt>users@users-desktop:~$ </prompt><userinput> warcserver -i 0.0.0.0 -p 8080 -x /home/warcfile \
                                 -t /tmp/ -s  warc_server</userinput>
        </screen>
        </example>
  </sect1>
  <sect1>
        <title> warcclient </title>
        <para>
        The option -i -p  and -s are mandatory, the client makes request  to the located server at
        the address  specified as argument of the -i option, on the port specified after -p. the option -s indicates for which kind server the request is sent to: the server may be a warcserver (launched by the command warcserver), an apache2 server with a mod_warc module, a lighttpd-cgi server using a warc.cgi module or a lighttpd-fcgi server using a warc.fcgi module.
        <itemizedlist     mark = 'bullet'>
		<listitem>
		<para>
		If you connect to a warcserver (launched by the command warcserver on the same IP address and port), the server name in this case is warcserver
		</para>
		</listitem>
        <listitem>
        <para>
        If you want to connect to Apache server (configuration of Apache server is shown in 
        section mod_apache) server name in this case is apache.
        </para>
        </listitem>
        <listitem>
        <para>
        If you want connect to lighttpd server ( Configuration of lighttpd server is
        show in section mod_lighttpd) server name in this case is lighttpd-cgi or
        lighttpd-fcgi ( for cgi and fastcgi support respectively).
        </para>
        </listitem>
        </itemizedlist>
        </para>
        <para> 
        The option -t and -o are mandatory, the option -t must preceed the name of WARC
        file that the client want to get from server. Option -o must preceed the file
        name desired in the client machine.
        </para>
        <para>
        The option -f gives the value  of the offset in warc file from where we start the transfer. The
        offset is  the beginning of the WARC Record to get in WARC file. If you do not pass -f to the command offset by default is zero. 
        </para>
        <para>
        The option -r is used to indicate that the whole WARC file is required, and the transfer will start from the indicated offset.
        </para>
        <para> 
        The result obtained when  you want to get file or record are not filtered. If you
        want to have filtered WARC files, you can use options -u, -n or -d.
        <orderedlist numeration="lowerroman">
        <listitem>
        <para>
        Use the option -u to filter on the WARC_TARGET_URI field, it comes before the string which represents the filter.
        </para> 
        </listitem>
        <listitem>
        <para>
        Use the option -n to filter on the Content-Type field, it comes before the string which represents the filter.
        </para>
        </listitem>
        <listitem>
        <para>
        Use the option -d to filter on WARC-Type field, it comes before the string which represents the filter.
		If you specifies nothing after -d the value of filter is "unknown".
        </para>
        </listitem>
		<listitem>
		<para>
		Use the option -l to get the list of the WARC Redords stored in the required WARC file. In this case, the output file will be used to store this list which can be written into four possible formats: html, xml, text and json. each element of the list will give some information on the concerned WARC Record like its rank, offset, its header, etc.
		</para>
        </listitem>
        </orderedlist>
        </para>
        <para>
        There are examples that show how to use warcclient command
        </para>
        <example>
        <title> How to use the warcclient to get a WARC Record. </title>
        <screen>
<prompt>users@users-desktop:~$ </prompt><userinput>warcclient  -i  192.168.1.6 -p 8080 -s warcserver \
                                -t  test.warc -o vertest.warc  -f 0 </userinput>
        </screen>
        <para>
        In this case, we are sending a request to a warcserver, at IP address 192.168.1.6 whith
        the listening port 8080, to get record that begins at the offset 0 in the WARC file test.warc.
        The name of the returned file is vertest.warc in the client machine.
        </para>
        </example>
        <example>
        <title> How to use the warcclient to get a WARC file. </title>
        <screen>
<prompt>users@users-desktop:~$ </prompt><userinput>warcclient  -i  192.168.1.6 -p 8080 -s apache2  \
                                -t test.warc -o vertest.warc  -f 0 -r </userinput>
        </screen>
        <para>
        This request is similar to previous one, but here we send it to an apache2 server with a mod_warc module, and we want to get the whole 
		WARC file from offset 0.
        </para>
        </example>
        <example>
        <title> How to use the warcclient to get a filtered WARC file. </title>
        <screen>
<prompt>users@users-desktop:~$ </prompt><userinput>warcclient  -i  192.168.1.6 -p 8080 -s warcserver\
                                -t  test.warc -o vertest.warc  -f 0 -n gif </userinput>
        </screen>
        <para>
        This request is similar to previous requests but in this case we want to get the WARC file
        from offset 0 including only the WARC Records whose Content-Type field  contains the string <userinput>"gif"</userinput>.
        </para>
        </example>
        <example>
        <title> How to use warcclient to get the records list. </title>
        <para>
			To get the lising of the WARC Records stored in the wanted WARC file using an apache2 server, we may proceed like the following. Her, we've chose the <userinput>xml</userinput> output format. It is possible also to use <userinput>html</userinput>, <userinput>text</userinput> and <userinput>json</userinput>
        </para>
        
        <screen>
<prompt>users@users-desktop:~$ </prompt><userinput>warcclient  -i  192.168.1.6 -p 8080 -s apache \
                                -t  test.warc -o vertest.warc  -f 0 -l xml</userinput>
        </screen>
        </example>     
        <para>
        In the same way, we can use mod_lighttpd by using supported cgi or fastcgi modules by
        typing in the case where we want to use cgi:
        </para>
        <example>
        <title> How to use warcclient with lighttpd server using cgi module. </title>
        <screen>
<prompt>users@users-desktop:~$ </prompt><userinput>warcclient -i 192.168.1.6 -p 8080 -s lighttpd-cgi \
                                -t  test.warc -o vertest.warc  -f 0 -l xml</userinput>
        </screen>
        <para>
        And in the case where we want to use fastcgi:
        </para>
        </example>
        <example>
        <title> How to use warcclient with lighttpd using fastcgi module. </title>
        <screen>
<prompt>users@users-desktop:~$ </prompt><userinput>warcclient -i 192.168.1.6 -p 8080 -s lighttpd-fcgi \
                                 -t  test.warc -o vertest.warc  -f 0 -l xml</userinput>
       </screen>
       </example> 
  </sect1>
  <sect1>
  <title> mod_apache </title>
  <para>
  To know how to peroform the installtion and the configuration of an apache server to make run the mod_warc module, we can read the section reserved
  to mod_apache in file <filename>"doc/install"</filename> in the warc-tools source code.
  </para>
  <para>
  We can type Url in browser to get AWRC resources. Url must follow a rest format. 
  This format is explained in file <filename>"doc/install"</filename>
  </para>
  <para>
  If we start an apache server in localhost at port 3000, we can type this url to list headers and anvl fields of the WARC Records from  WARC file <filename>"home/nsr/test.warc.gz"</filename> 
  from offset 0.
  <!--
  <figure><title>How to use mod_apache with browser</title> <graphic  srccredit="Norman Walsh, 1998"   fileref="captreq2.png"></graphic> 
  </figure> -->
  <example> 
  <title> How to send a request to an apache 2 server with the browser using the the mod_warc module.</title>
  <screenshot>
  <screeninfo>640*480*256</screeninfo>
  <graphic fileref="captreq2.png"></graphic> 
  </screenshot>
  </example>
  </para>
  </sect1>
  <sect1>
  <title> mod_lighttpd </title>
  <para>
  To know how to peroform the installation and the configuration of a lighttpd server to make either warc.cgi or warc.fcgi moules run, we can read the section reserved 
  to mod_lighttpd in the file <filename>"doc/install"</filename> in warc source code.
  </para>
  <para>
  If we use a lighttpd server, we can use mod cgi and mod fastcgi to get warc resources.
  In this case, we use an url in the rest format but we have to precede this url by the wanted script cgi or fastcgi.
  </para>
  <para>
  If we start a lighttpd server in localhost at port 3000, we can type this url to list the headers and anvl fields of the WARC Records from a WARC file <filename>"home/nsr/test.warc.gz"</filename> by using cgi script.
 
  <!--     
  <figure><title>How to use mod_lighttpd with browser using cgi</title> <graphic  srccredit="Norman Walsh, 1998"   fileref="captreq3.png"></graphic> 
  </figure> -->
  <example>
  <title> How to send a request to a lighttpd server with a browser using warc.cgi script. </title>
  <screenshot>
  <screeninfo>640*480*256</screeninfo>
  <graphic fileref="captreq3.png"></graphic> 
  </screenshot>
  </example>
  </para>
  <para>
  In the same way, we can type the same url to list the headers and anvl fields of the WAR Records from a WARC file <filename>"home/nsr/test.warc.gz"</filename> 
  by using fastcgi script.
  <!--
  <figure><title>How to use mod_lighttpd with browser using fastcgi</title> <graphic  srccredit="Norman Walsh, 1998"   fileref="captreq4.png"></graphic> 
  </figure> -->
  <example>
  <title> How to send a request to a lighttpd server with a browser using the fastcgi. </title>
  <screenshot>
  <screeninfo>640*480*256</screeninfo>
  <graphic fileref="captreq4.png"></graphic> 
  </screenshot>
  </example>
  </para>
  </sect1>
</chapter>
<chapter id= "chapter4">
  <title> Programming with the warc library </title>
  <para>
  This chapter describes the principals of the functions privided for programming with the libwarc. 
  However for more details we can refer to the documentation generated with Doxygen
  from the warc-tools source code.
  </para>
  <para>
  The  warc library has been designed for three main purposes :
  <itemizedlist>
  <listitem>
  <para>
  The warc library provides a set of routines that allow WARC files creation,
  this routines must be able to check that the arguments given by the user 
  are conform with the WARC format.
  </para>
  </listitem>
  <listitem>
  <para>
  The warc library provides a set of routines that allow to extract information
  from WARC files (headers, anvl fields and data block). These routines must be able to
  check that the data obtained is conform with the WARC format (validation of a WARC file).
  </para>
  </listitem>
  <listitem>
  <para>
  The warc library provides a set of routines that allow to convert files from the 
  Arc format to the WARC format. These routines must be able to check that the ARC
  file is conform with the ARC format.
  </para>
  </listitem>
  </itemizedlist>
  We can use the routines offered by the warc library for other purposess. In the following, we
  will describe the main data types and functions of this library.
  </para>
  <sect1>
  <title> Generalities </title>
  <sect2>
  <title> Object-oriented concept </title>
  <para>
  The way how the source code is written makes the warc function very easy to use.
  The project is built by using the oriented-object concept in C language.
  Although the C  language is not an object-oriented language, we can simulate the object-oriented beahaviour 
  by using mainly pointers to functions concept.
  For using all functions of the warc library, we must include the header file <filename>"warc.h"</filename> in the program.
  </para>
  <para>
  We use the function <function>bless</function> to create any object. In order to differentiate between
  the classes, the first argument of this function is the name of object. For example, if we 
  want to  create a WFile object, the name of this parameter is <parameter>WFile</parameter>.
<literallayout>
  The function <function>bless</function> returns the pointer to othe created object in the case of the success of creation. 
</literallayout>
  </para>
  <para>
  The function <function>destroy</function> is used to destroy any object created by <function>bless</function>. It takes as parameter the pointer of the object.
  </para>
  <para>
  This way to work notably facilitates the memory management, every object created by
  <function>bless</function> must be destroyed by <function>destroy</function>.
  </para>
  </sect2>
  <sect2>
  <title> The user interface </title>
  <para>
  The warc library provides to the functions user a clear and easy interface : A WFile class for the manipulation of WARC files,  
  a WRecord class for the manipulation of the WARC Records, the ARecord object for the manipulation of ARC Records and finally the class Afile for exploitation of the ARC files.
   The prototypes of all theese function can be found in the corresponding header files in the <filename>/lib/public/</filename> directory.
  </para>
  </sect2>
  </sect1>
  <sect1>
  <title> Data types </title>
  <para>
  The warc library has defined its own data types to make the information manipluation esay. Here there are those that the user will have to handle.
  </para>
  <glosslist>
  <glossentry><glossterm>warc_bool_t</glossterm>
  <glossdef>
  <para>
  This is the warc boolean type having two possible values :<parameter>WARC_TRUE</parameter> and <parameter> WARC_FALSE</parameter>.
  </para>
  </glossdef>
  </glossentry>
  <glossentry><glossterm>warc_i32_t</glossterm>
  <glossdef>
  <para>
  This is a simple signed integer, we prefer use this type to get protability with any architecture.
  </para>
  </glossdef>
  </glossentry>
  <glossentry><glossterm>warc_u32_t</glossterm>
  <glossdef>
  <para>
  This is  a simple unsigned integer, we prefer use this type to get protability with any architecture.
  </para>
  </glossdef>
  </glossentry>
  <glossentry><glossterm>warc_i8_t</glossterm>
  <glossdef>
  <para>
  This is a simple signed character, we prefer use this type to get protability with any architecture.
  </para>
  </glossdef>
  </glossentry>
  <glossentry><glossterm>warc_u8_t</glossterm>
  <glossdef>
  <para>
  This is a simple unsigned character, we prefer use this type to get protability with any architecture.
  </para>
  </glossdef>
  </glossentry>
  <glossentry><glossterm>warc_i64_t</glossterm>
  <glossdef>
  <para>
  This is a simple signed long intreger, we prefer use this type to get protability with any architecture.
  </para>
  </glossdef>
  </glossentry>
  <glossentry><glossterm>warc_u64_t</glossterm>
  <glossdef>
  <para>
  This is a simple unsigned long integer, we prefer use this type to get protability with any architecture.
  </para>
  </glossdef>
  </glossentry>

  <glossentry><glossterm>warc_compt_t</glossterm>
  <glossdef>
  <para>
  This is an enumerated type used to specify compression mode for the WARC files,  three values are possible :
  <parameter>WARC_FILE_UNCOMPRESSED</parameter>, <parameter>WARC_FILE_COMPRESSED_GZIP</parameter>, 
  <parameter>WARC_FILE_COMPRESSED_GZIP_DEFAULT_COMPRESSION</parameter>,  
  <parameter>WARC_FILE_COMPRESSED_GZIP_NO_COMPRESSION</parameter>, 
  <parameter>WARC_FILE_COMPRESSED_GZIP_BEST_SPEED</parameter>, 
  <parameter>WARC_FILE_COMPRESSED_GZIP_BEST_COMPRESSION</parameter>, and
  <parameter>WARC_FILE_DETECT_COMPRESSION</parameter> 
  </para>
  </glossdef>
  </glossentry>
 
  <glossentry><glossterm>warc_mod_t</glossterm>
  <glossdef>
  <para>
  This is an enumerated type used to specify the mode of the openening of a WARC file object. There are two possible modes
  <parameter>WARC_FILE_READER</parameter>, <parameter>WARC_FILE_WRITER</parameter>.
  </para>
  </glossdef>
  </glossentry>

  <glossentry><glossterm>warc_rec_t</glossterm>
  <glossdef>
  <para>
  This an enume used to specfies the value of the WARC-TYPE field. Nine values are possible
  <parameter> WARC_UNKNOWN_RECORD   </parameter>, <parameter> WARC_INFO_RECORD</parameter>, 
  <parameter> WARC_RESPONSE_RECORD  </parameter>, <parameter> WARC_REQUEST_RECORD</parameter>,
  <parameter> WARC_METADATA_RECORD  </parameter>, <parameter> WARC_REVISIT_RECORD</parameter>,
  <parameter> WARC_CONVERSION_RECORD</parameter>, <parameter> WARC_CONTINUATION_RECORD</parameter> and
  <parameter> WARC_RESOURCE_RECORD  </parameter>
  </para>
  </glossdef>
  </glossentry>
  </glosslist>
  </sect1>
  <sect1>
  <title> Creation and destruction of objects </title> 
  <sect2>
  <title> Creation and destrunction of WFile object </title>
  <para>
  We use function <function>bless</function> to create a WFile object for the manipulation of a WARC file    
  </para>
       <programlisting>
       void * bless (WFile, const char* fname, warc_u32_t  maxsize,
                  wfile_mod_t mode, const wfile_comp_t compressed ,
                  const char * dname, const warc_u32_t dname_len)
       </programlisting>
       <para>
       <varname>maxsize</varname> is a <type>warc_u32_t</type> paraleter guiving the maximum size of the WARC file. Used only in the writing case.
       </para>
       <para>
       <varname>mode</varname>  is <type>wfile_mod_t</type> parameter indicating the opening mode of the WARC file.
       </para>
       <para>
       <varname>compressed</varname> is a <type>wfile_comp_t</type> parameter indicating the compression mode of the WARC file (useful in writing mode).
        </para>
       <para>
        In general <parameter>WARC_FILE_DETECT_COMPRESSION</parameter> is used to allow autodetection of the compression mode in the reading mode.
        </para>
        <para>
        <varname>fname</varname> and <varname>dname</varname> are simple strings guiving respectively  the name of the WARC file and the working directoy of the WFile objet routines (for temporary files creation). <varname>dname_len</varname> is the length of the <varname>dname</varname> string.
        </para>
        <para>
        If we want to get information from an existing  WARC file <filename>"file.warc"</filename> present in some
        directory, we create  the WFile object in reading mode like this :
        <example>
        <title> Creation of a WFile object in reading mode </title> 
        <programlisting>
        bless (WFile, "file.warc", 0, WARC_FILE_READER,
            WARC_FILE_DETECT_COMPRESSION, ".")
        </programlisting>
        </example>
        </para>
        <para>
        <varname>maxsize</varname> in not used in this case because its value is not important. We notice also that when a WFile is created in reading mode, the file descriptor inside it will automatically seek the begining of the WARC file.
        </para>
        <para>
        If you want to open a WaRC file object to append int it some WARC Records, we must create a WFile
        object in writng mode like this :
        <example>
        <title> Creation of a WFile object in writing mode </title>
        <programlisting>
        bless (WFile, "file.warc", 600* 1024 * 1024, 
            WARC_FILE_WRITER,WARC_FILE_DETECT_COMPRESSION, ".")
        </programlisting>
        </example>
        </para>
        <para>
        We use <parameter>WARC_FILE_WRITER</parameter> as opening mode in this case. In this mode, the value of the maxsize field is significant: it indicates the maximum size of the WARC file that must not be exceeded when we write in the WARC file. Notice that if this value is below the currennt size of the file, the WFile object is not created. This allows to avoid the resize of the WARC file and hence the loose of the data stored in. When a WFile object is created in writing mode, its internal file descripto will automatically seek the end of the WARC file, this will ensure that a WARC Record will never be stored in the middle, and hence corrupt the WARC file, but it is allways appended in the end
        </para>
        <para>
        To destroy cleanly an already created WFile object, we may use the function <function>destroy</function>. It will take as parameter the pointer to the WFile object instance we want to free.
        <programlisting>
        destroy (void * refobject).
        </programlisting>
        </para>
  </sect2>
  <sect2>
  <title> Creation and destruction of a WRecord object  </title>
  <para>
  We may use <function>bless</function> and <function>destroy</function> to create and destroy WARC Record object.
  The function <function>bless</function> takes no parameter for the creation of a <parameter>WRecord</parameter> object (a WARC Record object).
  <programlisting>
  void * recobject = bless (WRecord);
  </programlisting>
  </para>
  <para>
	  To destroy cleanly an already created WRecord object, we may use the function <function>destroy</function>. It will take as parameter the pointer to the ARecord object instance we want to free.
	  <programlisting>
		  destroy (void * refobject).
	  </programlisting>
        </para>
  </sect2>
  <sect2>
	  <title> Creation and destrunction of AFile object </title>
	  <para>
		  We use function <function>bless</function> to create a AFile object for the manipulation of a ARC file.
	  </para>
	  <programlisting>
		  void * bless (AFile, const char* fname, const afile_comp_t compressed , const char * dname, const warc_u32_t dname_len)
	  </programlisting>
	  <para>
		  <varname>compressed</varname> is a <type>afile_comp_t</type> parameter indicating the compression mode of the ARC file.
	  </para>
	  <para>
		  In general <parameter>ARC_FILE_DETECT_COMPRESSION</parameter> is used to allow autodetection of the compression mode.
	  </para>
	  <para>
		  <varname>fname</varname> and <varname>dname</varname> are simple strings guiving respectively  the name of the WARC file and the working directoy of the WFile objet routines (for temporary files creation). <varname>dname_len</varname> is the length of the <varname>dname</varname> string.
	  </para>
	  <para>
		  To destroy cleanly an already created AFile object, we may use the function <function>destroy</function>. It will take as parameter the pointer to the AFile object instance we want to free.
		  <programlisting>
			  destroy (void * refobject).
		  </programlisting>
	  </para>
  </sect2>
  <sect2>
	  <title> Creation and destruction of an ARecord object  </title>
	  <para>
		  We may use <function>bless</function> and <function>destroy</function> to create and destroy ARC Record object.
		  The function <function>bless</function> takes no parameter for the creation of a <parameter>ARecord</parameter> object (an ARC Record object).
		  <programlisting>
			  void * recobject = bless (ARecord);
		  </programlisting>
	  </para>
	  <para>
		  To destroy cleanly an already created ARecord object, we may use the function <function>destroy</function>. It will take as parameter the pointer to the ARecord object instance we want to free.
		  <programlisting>
			  destroy (void * refobject).
		  </programlisting>
	  </para>
  </sect2>
  </sect1>
  <sect1>
  <title> WFile object routines </title>
  <para>
  In this section, we give a description of the main functions provided to manipulate a WFile object after having created it with <function>bless</function>. A WARC File have to be only manipulated through a WFile object using its routins. That will allow the safe recovering of the information stored inside. It is dangerous and not recomanded to manipulate a WARC file with an other way at the risk of corrupting it.
  </para>
  <sect2>
	<title> Reading the WARC Records of a WARC file</title>
	<para>
	To read in sequence the WARC Records of a WARC file opned by the construction of a WFile object on it, we have to use the function <function>WFile_nextRecord</function> which will take as parameter the pointer to the corresponding WFile object. This function will extract the header of the WARC Record pointed by the WFile object, then this last one will jump to the next WARC Record. If safetly used, the file descriptor inside the WFile object will allways point to a valid WARC Record in the WARC file or to the end of file. Hence, we are sure tha we will never badly extract the header of the wanted WARC Rrcord using the <function>WFile_nextRecord</function>.
	</para>
	<para>
	When succeeding in the reading operation, the function <function>WFile_nextRecord</function> will return a pointer to a valid WRecord object (the construction of the object is done inside the <function>WFile_nextRecord</function>, and then it must be destroyed after usage) which may be manipulated by the WRecord class functions (described in the following sections). If it fails, it will return a NIL (NULL) value in all crash case.
	</para>
	<para>
		With the <function>WFile_nextRecord</function>, we can only read the WARC Record in a fifo order. If we read a WARC Record using it, we can not come back to directly. And when th file descrciptor of the WFile object reaches the end of th WARC file, the <function>WFile_nextRecord</function> function will return a NULL value considering it as an error. However, the library provides a function called <function>WFile_hasMoreRecords</function> that tests if it remains some WARC Records that can be read. Generally, we use the function <function>WFile_nextRecord</function> in collaboration with the <function>WFile_hasMoreRecord</function> function like shown in the example below. And if we want to come back to an already visited record, the library provides a function <function>WFile_seek</function> that allows to seek an offset in the correspondin WARC file. Generally, the given offset have to be a valid WARC Record offset, else the reading operation will success (when reading from a bad offset, the <function>WFile_nextRecord</function> will consider that it is on a corrupted WARC Record).
	</para>
	<example>
	<title> Reading safetly the WARC Records of a WARC file opened with the WFile object <varname>warcfile</varname> </title>
	<programlisting>
	void *  warcfile =  bless (WFile, "file.warc",0,
           WARC_FILE_READER, WARC_FILE_DETECT_COMPRESSION, ".");
	void * r = NIL;
	
	while (WFile_hasMoreRecord (warcfile))
		{
		r = WFile_nextRecord (warcfile);
		
		unless (r) /* testing if the read operation has passed well*/
		/* some instructions */
		
		/*
		
		working with the record r
		
		*/
		
		destroy (r); /* destruction of the generated object */
		}
	/* end of program */
	destroy (warcfile) /* destruction of the object warcfile */
	</programlisting>
	</example>
  </sect2>
  <sect2>
	<title>The registration of an extracted WARC Record in a WARC file</title>
	<para>
	When a WRecord object is created by the <function>WFile_nextRecord</function>, the first thing that we may want to do with it is to recover the corresponding stored data block, and of course the library provides the necessary function to do this (see the section concerning the WRecord routines). But before we can access the data block of a WRecored object, we must register this last one to its origin WFile object. This will oblige the WRecord to be linked with its origin WFile (we may use the same WRecord object with several WFile objects) and we will never have the possiblity to use it to try thye extraction of data from another WARC file. The function which allows us to do that is <function>WFile_register</function>. This function will have four parameters which are, in that order:
	<itemizedlist mark="dash">
		<listitem>
			<para>The pointer to the corresponding WFile object.</para>
		</listitem>
		<listitem>
			<para>The pointer to WRecord object we want to register.</para>
		</listitem>
		<listitem>
			<para>The pointer to a callback function. This parameter is the most important because it is a function given by the user where he will write the code of the work he wants to perform with the data extracted from the WARC Record. This function will be automaticallay called by the WRecord when the data is reclaimed by the user. Hence, the user will never have directly an acces to the WARC file, it is the WFile object itself which will read the data from it gives it the user. The parameters of this callback function will be described in the WRecord data acces routine function called <function>WRecord_getContent</function>.</para>
		</listitem>
		<listitem>
			<para>The pointer to a user environnement structure. Porbably, the user will need the data of a WARC Record to fill some variables and structures. For this, he have to groupe them in a single structur and give the pointer of this last one as a parameter of the <function>WFile_register</function>. When the callback function is called, this pointer is given as a parameter to it. Actually, the type of this pointer is <type>void *</type>. It is for the user to do a casting (type change) on it to the wanted structure pointer type in such way that he will be able to use it.</para>
		</listitem>
	</itemizedlist>
  </para>
  </sect2>
  <sect2>
	<title> Adding a WARC Record to a WARC file</title>
	<para>sect2
	Now, if we want to archive a data in a WARC file, we simply have to fill a WRecord object with its parameters (see the WRecord filling section) and call the function <function>WFile_storeRecord</function>. This function take two parameters:
		<itemizedlist mark="dash">
			<listitem>
			<para>The pointer to the WFile object linked to the WARC file where we want to store the record.</para>
			</listitem>
			<listitem>
			<para>The pointer to the WRecord object which was filled with the new WARC Record parameters and linked to the data file we want to archive.</para>
			</listitem>
		</itemizedlist>
	</para>
	<para>
	Before the new WARC Record is stored, the function <function>WFile_storeRecord</function> will check if its fields are filled in conformity with the WARC Format. Then, the WARC Record will only be stored if all its mandatory fields are filled and if the other fields matches the WARC-Type of the WARC Record. If there is an additionnal or missing field w.r.t the WARC-Type, the storage operation is aborted and the <function>WFile_storRecord</function> function will return an error.
  </para>
  </sect2>
  </sect1>
  
  <sect1>
  <title> WRecord object routines</title>
  <para>
  Now, we will describe the routines provided with the WRecord class. These functions will allow us to set up and recover the main fields of the WRecord object and also its  extra fields (see the ISO WARC format specification). There is also functions that gives information about an extracted WARC Record linked to the WRecord object.
</para>
	<sect2>
	<title> WARC Record Fileds getting functions</title>
	<para>
	In the folowing, we give the description of the functions of the WRecord class that allow to recover the fields of a WARC Record. These function are very useful when we want to get the fileds of the header of an extracted WARC Record. For each predefinded WARC Record header field, ther is its corresponding getting function. There is also a mean to recover the Extra non predefined fields (the ANVL fields of the header), then, we may get all the stored information about the WARC Record.
		<itemizedlist mark="dash">
			<listitem>
			<para><function>WRecord_getWarcId</function>: This function is used to get the WARC ID of the WARC Record. Remember that the format of a WARC ID is: WARC/version, where version is the actual version of the WARC Record, for example, the lastest version of the WARC is 0.18, then the WARC ID of any WARC Record is <constant>"WARC/0.18"</constant>.</para>
			</listitem>
			<listitem>
			<para><function>WRecord_getRecordType</function>: This function is used to get the WARC-Type field of the WARC Record. Lets remember that there is eight predefined types for a WARC Record, then, an enumertive type has been used to represent each of theses type. This function will return us the corresponding enumaration to the WARC Type of our WARC Record. The list of possible enumearations is given ordered below:
			<itemizedlist mark="bullet">
				<listitem>
				<para><constant>WARC_UNKNOWN_RECORD</constant>: For an eventual unknown WARC Record type.</para>
				</listitem>
				<listitem>
				<para><constant>WARC_INFO_RECORD</constant>: For the <constant>"warcinfo"</constant> type.</para>
				</listitem>
				<listitem>
				<para><constant>WARC_RESPONSE_RECORD</constant>: For the <constant>"response"</constant> type.</para>
				</listitem>
				<listitem>
				<para><constant>WARC_REQUEST_RECORD</constant>: For the <constant>"request"</constant> type.</para>
				</listitem>
				<listitem>
				<para><constant>WARC_METADATA_RECORD</constant>: For the <constant>"metadata"</constant> type.</para>
				</listitem>
				<listitem>
				<para><constant>WARC_REVISIT_RECORD</constant>: For the <constant>"revisit"</constant> type.</para>
				</listitem>
				<listitem>
				<para><constant>WARC_CONVERSION_RECORD</constant>: For the <constant>"conversion"</constant> type.</para>
				</listitem>
				<listitem>
				<para><constant>WARC_CONTINUATION_RECORD</constant>: For the <constant>"continuation"</constant> type.</para>
				</listitem>
				<listitem>
				<para><constant>WARC_RESOURCE_RECORD</constant>: For the <constant>"resource"</constant> type.</para>
				</listitem>
			</itemizedlist>
		</para>
			<para>
			All these enumerations are defined in the public header <filename>"wrectype.h"</filename> that must be included to have the possibility to use them. And if we may add a new WARC Type to this list, we can simply add this new type to the enumartions.
			</para>
			</listitem>
		<listitem>
		<para><function>WRecord_getRecordId</function>: This function gives the Id of the WARC Record stored in the WARC-Record-ID field.</para>
		</listitem>
		<listitem>
		<para><function>WRecord_getDate</function>: This function gives the Creation date of the WARC Record stored in its WARC-Date field.</para>
		</listitem>
		<listitem>
		<para><function>WRecord_getContentLength</function>: This function gives the size of the data block of the WARC Record. It is stored in the Content-Length field.</para>
		</listitem>
		<listitem>
		<para><function>WRecord_getContentType</function>: This function gives the type of the content of the WARC Record data block. It is stored in the Content-Type field.</para>
		</listitem>
		<listitem>
		<para><function>WRecord_getConcurrentTo</function>: This function gives the Id of the WARC Record which the current one is concurrent to. It is stored in the WARC-Concurrent-To field.</para>
		</listitem>
		<listitem>
		<para><function>WRecord_getBlockDigest</function>: This function gives the digest value of the data block folowing a specific algrithm. It is stored in the WARC-Block-Digest field of the WARC Record header.</para>
		</listitem>
		<listitem>
		<para><function>WRecord_getPayloadDigest</function>: This function gives the digest value of the data block payload following a specific algorithm. It is stored in the header field WARC-Payload-Digest.</para>
		</listitem>
		<listitem>
		<para><function>WRecord_getIpAddress</function>: This function gives the Ip address from where the data block was crawled. It is stored in the WARC-IP-Address field.</para>
		</listitem>
		<listitem>
		<para><function>WRecord_getRefersTo</function>: This function gives the Id of the WARC Record to which the current one refers. It is stored in the field WARC-Refers-To</para>
		</listitem>
		<listitem>
		<para><function>WRecord_getTargetUri</function>: This function gives the URI of the source from where the data block was crawled. It is stored in the WARC-Target-URI field</para>
		</listitem>
		<listitem>
		<para><function>WRecord_getTruncated</function>: If the WARC Record has been trucncated, this function will give us the reason of the tructcation</para>
		</listitem>
		<listitem>
		<para><function>WRecord_getWarcInfoId</function>: This function gives the Id of the <constant>"warcinfo"</constant> Record describing the WARC file to which the current WARC Record belongs. It is stored in the WARC-Warcinfo-Id field.</para>
		</listitem>
		<listitem>
		<para><function>WRecord_getFilename</function>: This function gives the name of the WARC file to which this WARC Record belongs. It is stored in the WARC-Filename field.</para>
		</listitem>
		<listitem>
		<para><function>WRecord_getProfile</function>: This function is only useful in the cas of a <constant>"revisit"</constant> Recrod because that this information may only exist in this case. It returns the kind of transformation applied on an already visited data but found under an other form. This value is stored in the WARC-Profile field</para>
		</listitem>
		<listitem>
		<para><function>WRecord_getIdentifiedPayloadType</function>: This function returns the identified type of the payload of the WARC Record data block. This value is stored in the WARC-Identified-Payload-Type field.</para>
		</listitem>
		<listitem>
		<para><function>WRecord_getSegmentOriginId</function>: This function is only usable in the case of a fragment of a segmented record identified by the <constant>"continuation"</constant> type. It gives the Id of the first fragment of the whole WARC Record, this one is stored in the WARC-Segment-Origin-Id field</para>
		</listitem>
		<listitem>
		<para><function>WRecord_getSegmentNumber</function>: This function is also usable in the WARC Record fragment case. It gives the number of current fragment, this value is stored in the WARC-Segment-Number field </para>
		</listitem>
		<listitem>
		<para><function>WRecord_getSegTotalLength</function>: This function is only usable in with the last fragment of a segmented WARC Record. It gives the total Length of the whole WARC Record knowing that the Content-Length field will only give the actual Length of the data fragment stored in the record. It is stored in the WARC-Segment-Total-Length field.</para>
		</listitem>
		<listitem>
		<para><function>WRecord_getAnvlField</function>: We know that in the header of a WARC Record, we can find predefined fields described below, and some extra fileds defined by the user himself (if he needs them to add more information to the header). Then, this function offers a mean to recover these user-defined fields. It takes as parameter the pointer of the WRecord object, the rank of the extra field in the header and two strings that will contain both of the key and the value of the extra field.</para>
		</listitem>
		<listitem>
		<para><function>WRecord_getAnvlFieldsNumber</function>: This function return the number of the extra fields in the WARC Record. It may be useful when combined with the WRecord_getAnvlField.</para>
		</listitem>
		</itemizedlist>
	</para>
	</sect2>
	<sect2>
	<title> WARC Record fileds setting function</title>
	<para>
	Now, if we want to store a data block in a AWRC file, we have to crate a WARC Record for it, then, we must fill the headers field fields before. The routines described below allow us to fill each of a WARC Record header fields. 
	</para>
	<itemizedlist mark="dash">
		<listitem>
			<para><function>WRecord_setRecordType</function>: This function is used to set the WARC-Type field of the WARC Record. It takes as parameters the pointer of the WREcord object corresponding to trhe WARC Record and one of the constant values described above indicating the WARC Record type. This function returns <constant>False</constant> if it succeeds and True otherwise.
			</para>
		</listitem>
		<listitem>
			<para><function>WRecord_setRecordId</function>: This function sets value of the WARC Record Id which will be stored in the WARC-Record-ID field. It takes as parameters the pointer to the corresponding WRecord object and the value of the WARC Record Id. This function will also check if the value of the WARC Record Id matches the ISO URI format. It returns <constant>False</constant> in success case and <constant>True</constant> else.</para>
		</listitem>
		<listitem>
			<para><function>WRecord_setDate</function>: This function sets the Creation date of the WARC Record which will be stored in its WARC-Date field. It takes as parameters the pointer to the corresponding WRecord object, the value of the creation date field string and its length. The date string format must be like the  <constant>"YYY-MM-DDThh:mm:ssZ"</constant> format. It will return <constant>False</constant> if it succeeds and <constant>True</constant> else.</para>
		</listitem>
		<listitem>
			<para><function>WRecord_setContentType</function>: This function allows to set the value of the Content-Type field of the WARC Record. It will have as parameters the pointer to the WRecord object, the mime-type string describing the type of the data block to be stored and its length. It returns <constant>False</constant> when it succeeds and <constant>True</constant> otherwise.</para>
		</listitem>
		<listitem>
			<para><function>WRecord_setConcurrentTo</function>: This function is used to set the value of the WARC-Concurrent-To Field of the WARC Record Header. It takes as parameters the pinter to the WRecord Object, the uri string giving the Id of the concurrented WARC Record and its length. When it succeerds, this function returns <constant>False</constant> and <constant>True</constant> otherwise.</para>
		</listitem>
		<listitem>
			<para><function>WRecord_setBlockDigest</function>: This function sets the value of the WARC-Block-Digest field. it should have as parameters the pointer to the WRecord object, the digest value string and its length. the return value of this function is <constant>False</constant> in success case and <constant>True</constant> otherwise.</para>
		</listitem>
		<listitem>
			<para><function>WRecord_setPayloadDigest</function>: It allows to set the value of the WARC-Payload-Digest field. It takes the pointer of the WRecord object as a first parameter, the digest string describing the value of the field and its length. It returns the same values as the previous functions.</para>
		</listitem>
		<listitem>
			<para><function>WRecord_setIpAddress</function>: This function sets the value of the WARC-IP-Address field. It will have the pointer of the WRecord object, the Ip address string as parameters and its length. The retun values of this function are the same as the previous ones.</para>
		</listitem>
		<listitem>
			<para><function>WRecord_setRefersTo</function>: This function sets the WARC-Refers-To field value of a WARC Record. It has as parameters the pointer to the WRecord object, the uri string giving the refered WARC Record and its length. It returns the same possible values as the previous functions.</para>
		</listitem>
		<listitem>
			<para><function>WRecord_setTargetUri</function>: It sets the value of the WARC-Target-URI field of a WARC Record. We give it the pinter of the WRecord object, the uri string of the targeted WARC Record and its length. This function also returns <constant>False</constant> in success case and <constant>True</constant> otherwise.</para>
		</listitem>
		<listitem>
			<para><function>WRecord_setTruncated</function>: Sets the WARC-Truncated field value of a WRecord object, identified by its pointer given in the first parameter, with the truncation reason string, given in the second parameter,  and its length in the third parameter. It returns the same values as the prvious functions.</para>
		</listitem>
		<listitem>
			<para><function>WRecord_setWarcInfoId</function>: It sets the WARC-Info-ID field of a WARC Record. It takes as parameters the pinter to the WRecord object, the uri string describing the id of the related WARC-INFO Record and its length. It also returns <constant>False</constant> whend it succeeds and <constant>True</constant> otherwise.</para>
		</listitem>
		<listitem>
			<para><function>WRecord_setFilename</function>: This function sets the WARC-Filename field of a WARC Record. it has as parameters the pointer to the WRecord object, the WARC file name string and its length. When it succeeds, this function returns <constant>False</constant> and it returns <constant>True</constant> otherwise.</para>
		</listitem>
		<listitem>
			<para><function>WRecord_setProfile</function>: This function is only useable in the cas of a <constant>"revisit"</constant> Recrod. It sets WARC-Profile field of a WARC Record having the pointer to the WRecord object, the porfile string as parameters and its length. It returns <constant>False</constant> if it succeeds and  <constant>True</constant> otherwise.</para>
		</listitem>
		<listitem>
			<para><function>WRecord_setIdentifiedPayloadType</function>: It sets the WARC-Identified-Payload-Type field of the WARC Record. It will take as parameters the pointer to the WRecord object, the mime-type string describing the payload type and its length. It has the same return values as the previous functions.</para>
		</listitem>
		<listitem>
			<para><function>WRecord_setSegmentOriginId</function>: This function is only usable in the case of a fragment of a segmented record identified by the <constant>"continuation"</constant> type. It stets the value of the WARC-Segment-Origin-ID field of the WARC Record. It takes the pointer to the WRecord object, the id string and its length as parameters. Its returns values are the same as the previous functions.</para>
		</listitem>
		<listitem>
			<para><function>WRecord_setSegmentNumber</function>: This function is also usable in the WARC Record fragment case. It sets the WARC-Segment-Number field of the WARC Record. Its parameters are the pointer to the WRecord object and the integer giving the number of the segment. it returns the same thing as the previous functions.</para>
		</listitem>
		<listitem>
			<para><function>WRecord_setSegTotalLength</function>: This function is only usable in with the last fragment of a segmented WARC Record. It sets the WARC-Segmenet-Total-Length field of this particular WARC Record. we give it as parameters the pointer to the WRecord object and the total length as an integer. It will return <constant>False</constant> if it succeeds, and <constant>True</constant> otherwise.</para>
		</listitem>
		<listitem>
			<para><function>WRecord_addAnvl</function>: This function is used to add an unprdefined field at the end of the header of a WARC Record. It will take as parameters the pointer to the WRecord object, the field key string  and its length, and finally the field value string and its length. The return values of this function are also the same as the prvious setting functions.</para>
		</listitem>
		</itemizedlist>
	</sect2>
	<sect2>
	<title> WARC Record data block recovering</title>
	<para>
	To recover the data stored in a WARC Record, we will never allow to the user to directly access the WARC file. A content recovering function has been made to allow the user to manipulate the data block contained in the WARC Record. This function is <function>WRecord_getContent</function>. It may onlye be used after having registred the WRecord object using the <function>WFile_register</function> function. This function will call the registred callback function using on the data of the WARC Record.
	</para>
		<sect3>
		<title>Tha callback function prototype</title>
		<para>
		The callback function is e function having a particular prototype where the user will give the processing to do with the data coming from the WARC Record data block. The prottype of a callback function is:
		<example>
		<title>WARC callback functions prototype</title>
		<programlisting>
		warc_bool_t callback (void * env, const char* buff, const warc_u32_t size)
		</programlisting>
		</example>
		Where <constant>env</constant> is the pointer to the user envronnement that will be filled during the running of the callback function. The user has to do a cast inside the callback function to the <constant>env</constant> variable in such way that it will be usable. The <constant>buff</constant> parameter is a pointer to a byte array that will hold a chunk of data from the WARC Record data block and the parameter <constant>size</constant> will give the size of the data held in <constant>buff</constant>.
		</para>
		<para>
		The <function>WRecord_getContent</function> will take a chunk of <constant>size</constant> bytes from the data block of the WARC Record, puts it in an array buffer <constant>buff</constant> and will give them with the user environnement <constant>env</constant> as the parameters of the user callback function it will call on. This operation is repeated until all the data block will be all given. Thus, the user must take care that the callback function will recieve the data block by chunks, and it has to deal with that during the processing. The user is free to apply any processing on the data that the callback function will recieve. And he may also give a <constant>NULL</constant> pointer as environnement parameter if he has no one.
	</para>
		</sect3>
	</sect2>
  <sect2>
  <title> Other useful WRecord routines </title>
	<para>
		There is three other WRecord objects routines that are not directly concerned by the WARC format. The first function is <function>WRecord_getOffset</function> returns the offset of the WARC Record in the WARC file. The two other functions are <function>WRecord_getCompressedSize</function> and <function>WRecord_getUncompressedSize</function> are useful in the case of a compressed WARC Record. They gives respectively the compressed and the uncompressed size of the WARC Record. In the case of an Uncompressed Record, this previous values are the same. All these functions takes as parameter the pointer to the WRecord object
	</para>
  </sect2>
  </sect1>
  <sect1>
  <title> ARC files manipulation routines  </title>
  <para>
  The warc-tools library offers also function to manipulate archives stored in file with the old ARC format. As for the WARC format, there is two categories of functions: some functions are used in the manipulation of the ARC files and the others to manipulate the ARC Records.
  </para>
  <sect2>
  <title>Afile object routines</title>
  <para>
  In this section, we will present the functions that allows the manipulation of the ARC files. But, because that the warc-tools library is not dedicated to the ARC format, there will not be functions to store data in ARC files. There is only functions to recover data from the ARC file. the main purpuse of adding ARC file manipulation routines is to have the possibily to convert whole ARC files to WARC files.
  </para>
	<itemizedlist mark="bullet">
		<listitem>
		<para><function>AFile_nextRecord</function> This function allows to get an ARC Record from the ARC file. It has the same comportment as the <function>WFile_nextRecord</function> function. It allows to sequentially recover the ARC Records of an ARC file until it reches the end of the file. This function takes as parameter the pointer to the AFile object. It returns the pointer to a valid <constant>ARecord</constant> object if it succeeds or <constant>NULL</constant> otherwise.</para>
		</listitem>
		<listitem>
		<para><function>AFile_hasMoreRecords</function> This function allows to test if there is more ARC Records remaining  in the ARC file. It takes as parameter the pointer to the AFile object. It reurns <constant>True</constant> if still there is more ARC Records to explore in the ARC file or <constant>False</constant> if we are at the end of the ARC file.</para>
		</listitem>
		<listitem>
		<para><function>AFile_seek</function> This function is used to seek a particular offset in the ARC file. of course, if we seek an offset which is not the begibing of a valid ARC Record, the function <function>AFile_nextRecord</function> will return <constant>NULL</constant>. It takes as parameter the pointer of the AFile object. It will return <constant>False</constant> when it succeeds and <constant>True</constant> otherwise.</para>
		</listitem>
		<listitem>
		<para><function>AFile_register</function> It has the same role as the WFile routine <function>WFile_register</function>. It allows to register an extracted ARecord object with the corresponding ARC file in the purpuse of extracting the data block stored inside. It must have as parameters the pointer of the AFile object, the pointer of the ARecord objec, the pointer of the callback function used to manipulate the ARC Record data and finally the pointer of the user environnement variable. This function will return <constant>False</constant> if the registration succeeds and <constant>False</constant> otherwise.</para>
		</listitem>
	</itemizedlist>
  </sect2>
  <sect2>
  <title>ARecord object routines</title>
  <para>The following functions are used to recover the hedaer field of an ARC Record and also its data block. As we said previously, our aim is not to create ARC files, but only to recover information from them. Then, there will be no sttong function for an ARecord object.</para>
	<itemizedlist mark="bullet">
		<listitem>
		<para><function>ARecord_getUrl</function> This function is used to get the URL field of an ARC Record. It takes as parameter the pointer to the ARC Record object. It returns the URL string when it succeeds or <constant>NULL</constant> otherwise.</para>
		</listitem>
		<listitem>
		<para><function>ARecord_getreationDate</function> This function gives the creation date field of the ARC Record. It will have the pointer of the ARecord object as parameter. It returns the date string if it succeeds and <constant>NULL</constant> otherwise.</para>
		</listitem>
		<listitem>
		<para><function>ARecord_getMimeType</function> This function is used to get the mime type field of an ARC Record. It takes the pointer of the ARecord object as parameters and it returns the mime type string in the success case or <constant>NULL</constant> otherwise.</para>
		</listitem>
		<listitem>
		<para><function>ARecord_getIpAddress</function> This function will return the ip address field of the ARC Record header. it takes as parameter the pinter to the ARecord object. It will return the string describing the ip address filed if it succeeds or <constant>NULL</constant> otherwise.</para>
		</listitem>
	</itemizedlist>
  </sect2>
  <sect2>
  <title>Conversion of an ARC Record to a WARC Record</title>
  <para>
  Our aim to offer routines which allow the extraction of records from ARC files is to convert these last one into WARC Records. The, after having extracted an ARC Record rom an ARC File, we may create a new WRecord object and fill its hederd fields with nex information or inspired from the hedaer of the ARC Record. However, we must note two things:
  </para>
	<itemizedlist mark="dash">
		<listitem>
			<para>The format of the ARC dates ins different from the one of the WARC dates. The fisrt follows the standard fromat <constant>"YYYYMMDDHHMMSS"</constant> but the second follows a specila WARC format which is <constant>"YYYY-MM-DDTHH:MM:SSZ"</constant>. Then it is clear that we can not directly put the date extracted from an ARC Record in the WARC Record fields or the setting function will return an error. To this purpuse, a function called <function>WRecord_setDateFromArc</function> is offered. It takes as parameters the pointer of the WRecord object, the string describing the standard formatted date and the its length. this function will convert the standard date into a WARC formatted date and fill the WARC-Date field of the WRecord object. It will return <constant>False</constant> if it succeeds and <constant>True</constant> otherwise.</para>
		</listitem>
		<listitem>
		<para>To facilitate the tranformation of an ARC Record to a WARC Record, the warc-tools library offers a function called <function>ARecord_transferContent</function>. As its name indicates, this functions allows to transfer the data block from the ARC Record to the newly created WARC Record. It takes as parameter the pointer of the ARrecord object, the pointer to the new WRecord object and the pointer of the WFile object from where the data will be tranfered. Take care to give the right AFile object from which the ARecord object has been extraced because that the <function>ARecord_transferContent</function> function exécute a registration operation of the ARecord object with the AFile object. Then, if the two objects are not linked together, the transfer wilol fail. This function returns <constant>False</constant> if it succeeds and <constant>True</constant> otherwise.</para>
		</listitem>
	</itemizedlist>
  </sect2>
  </sect1>
  <!--<para>
  To create arc file object you can use
  <programlisting>
  void * a = bless (AFile, "file.arc", ARC_FILE_DETECT_COMPRESSION, ".");
  </programlisting>
  </para>
  <para>
  Using this code you can extract all arc records in arc file and display there content
  information.
  <example>
  <title> Extract header fields from arc file </title>
  <programlisting>
  void *ar = NIL;
  void * a = bless (AFile, "file.arc", ARC_FILE_DETECT_COMPRESSION, ".");
  while (AFile_hasMoreRecords (a) ) 
    { 
      void * ar  = AFile_nextRecord (a); 

      unless (ar) 
      { 
        destroy (a); 
        return; 
      }
    
      fprintf (stdout, "URL:  %s\n", ARecord_getUrl (ar) ); 
      fprintf (stdout, "Date: %s\n", Arecord_getCreationDate (ar) ); 
      fprintf (stdout, "Mime: %s\n", ARecord_getMimeType (ar) ); 
      fprintf (stdout, "IP:   %s\n", Arecord_getIpAddress (ar) );

     }
  </programlisting>
  </example>
  </para>
  <para>
  Combined function that manipulate arc file and function that manipulate the mode
  writer  of warc file you can convert arc file to warc file.
  </para>
  <para>
  You must use  function <function>Arecord_transferContent</function> that allows 
  the transfer the data block from arc record warc record.
  <programlisting>
  warc_bool_t ARecord_transferContent (void * ar, void * wr, void * a);
  </programlisting>
  ar is the arc record object, wr is
  the warc record object and a is the arc file object.
  </para>
  <para>
  The format of date in arc format is different then the warc format, for that 
  you must need to convert date by using function <function> WRecord_setDateFromArc </function>
  </para>
  <para>
  This source code shows how to create warc file from arc file.
  <example>
  <title> Convert arc file to warc file </title>
  <programlisting>
  
  #define uS(s)  ((warc_u8_t *) (s))
  #define makeS(s) uS(s), w_strlen (uS(s))
  #define makeU(s) (const warc_u8_t *) (s), (warc_u64_t) w_strlen(uS(s))

  void * w = bless (WFile, "file.warc", WARC_FILE_WRITER,
               WARC_FILE_DETECTION_COMPRESSION, ".");
  void * a = bless (AFile, "file.arc", ARC_FILE_DETECT_COMPRESSION, ".");
  while (AFile_hasMoreRecords (a) ) 
    { 
      void * ar  = AFile_nextRecord (a); 
      bless (WRecord);
      WRecord_setTargetUri  (wr, makeS (ARecord_getUrl (ar)));
      WRecord_setRecordType  (wr, WARC_RESOURCE_RECORD);
      WRecord_setDateFromArc (wr, makeS (ARecord_getCreationDate (ar) ) );
      WRecord_setContentType  (wr, makeS (ARecord_getMimeType (ar) ) );
      UID_hash (u, makeU (ARecord_getUrl (ar) ) );
      WUUID_hash (u, makeU (ARecord_getCreationDate (ar) ) );
      WRecord_setRecordId (wr, makeS (WUUID_text (u) ) );
      WRecord_setIpAddress (wr, makeS (ARecord_getIpAddress (ar) ) );
      ARecord_transferContent (ar, wr, a);
      WFile_storeRecord (w, wr);
      destroy (ar);
      destroy (wr);
    }
  destroy (a);
  destoy (w);
  </programlisting>
  </example>
  </para>
 </sect1>//-->
</chapter>
</book>
<!--<sect1>
	<title>  WUUID routines </title>
	<para> 
		RECORD_ID is on of field of header it must be single for all records.
		If you want to create warc files using class WUUID you can generate a
		single RECORD_ID.
	</para>
	<sect2>
		<title> Create and destroy wuuid object </title>
		<para>
			We can use <function> bless </function> to create WUUID object
			<programlisting>
				void * bless (WUUID)
			</programlisting>
			
			<parameter> WUUID </parameter> is the parameter that allows to reference WUUID object.
		</para>
		<para>
			You can use <function> destroy </function> to destroy the object WUUID.
			<literallayout>
				function <function>destroy</function> no returns parameter and takes as parameter the pointer returned by bless
			</literallayout>
		</para>
	</sect2>
	<sect2>
		<title> use wuuid </title>
		<para>
			We present in this section the manner how to use class WUUID to generate
			a single identifiant.
			<itemizedlist>
				<listitem>
					<para>
						<programlisting> 
							void WUUID_hash (const void * const , const warc_u8_t * ,
							const warc_u64_t )
						</programlisting>
						This function takes as parameter wuuid object, any string and his size.
						The unique identifiant is generated using the string given as parameter.
					</para>
				</listitem>
				<listitem>
					<para>
						<programlisting> 
							const char * WUUID_text (const void * const _self)
						</programlisting>
						This function takes as parameter wuuid object, and returns a
						string.
						<literallayout>
							This function is called after function <function> WUUID_hash</function> to get a single identifiant
						</literallayout>
					</para>
				</listitem>
			</itemizedlist>  
		</para>
	</sect2>
  </sect1>//-->
