-------------
Requirements
-------------

WARC is a self-contained library with no requirements but GCC.

The library was tested in x86 and PPC on both 32 bits and 64 bits architectures.

    o Linux:

    GCC >= 3.x.y

    o Windows MinGW:

    Install the following items in this order:

    wget http://kent.dl.sourceforge.net/sourceforge/mingw/MinGW-5.1.3.exe
    wget http://kent.dl.sourceforge.net/sourceforge/mingw/MSYS-1.0.11-2004.04.30-1.exe

    o Windows Cygwin:

    Install the following application:

    wget http://cygwin.com/setup.exe

    o MacOS X (Intel or PPC):

    Install XCode (http://developer.apple.com/tools/xcode/)

    o FreeBSD/NetBSD/OpenBSD:

    Use "gmake" instead of "make" when compiling.

    o Solaris:

    First, go to "sunfreeware.com" and downloaded "gcc", "libiconv" and the "make" packages for your Solaris achitecture (i.e. SPARC/X86) on the right panel.

    We assume here that you're using a Solaris 10 on a SPARC architecture. As root type:

    # wget ftp://ftp.sunfreeware.com/pub/freeware/sparc/10/libiconv-1.11-sol10-sparc-local.gz
    # wget ftp://ftp.sunfreeware.com/pub/freeware/sparc/10/gcc-3.4.6-sol10-sparc-local.gz
    # wget ftp://ftp.sunfreeware.com/pub/freeware/sparc/10/make-3.81-sol10-sparc-local.gz
    # wget ftp://ftp.sunfreeware.com/pub/freeware/sparc/10/binutils-2.17-sol10-sparc-local.gz
    # wget ftp://ftp.sunfreeware.com/pub/freeware/sparc/10/python-2.5.1-sol10-sparc-local.gz
    # wget ftp://ftp.sunfreeware.com/pub/freeware/sparc/10/libgcc-3.3-sol10-sparc-local.gz
    # wget ftp://ftp.sunfreeware.com/pub/freeware/sparc/10/libidn-1.8-sol10-x86-local.gz
    # wget ftp://ftp.sunfreeware.com/pub/freeware/sparc/10/libintl-3.4.0-sol10-x86-local.gz
    # wget ftp://ftp.sunfreeware.com/pub/freeware/sparc/10/curl-7.19.0-sol10-x86-local.gz

    # gunzip libiconv-1.11-sol10-sparc-local.gz
    # gunzip gcc-3.4.6-sol10-sparc-local.gz
    # gunzip make-3.81-sol10-sparc-local.gz
    # gunzip binutils-2.17-sol10-sparc-local.gz
    # gunzip python-2.5.1-sol10-sparc-local.gz
    # gunzip libgcc-3.3-sol10-sparc-local.gz
    # gunzip libidn-1.8-sol10-x86-local.gz
    # gunzip libintl-3.4.0-sol10-x86-local.gz
    # gunzip curl-7.19.0-sol10-x86-local.gz

    # pkgadd -d libiconv-1.11-sol10-sparc-local
    # pkgadd -d gcc-3.4.6-sol10-sparc-local
    # pkgadd -d make-3.81-sol10-sparc-local
    # pkgadd -d binutils-2.17-sol10-sparc-local
    # pkgadd -d libgcc-3.3-sol10-sparc-local (don't overwrite the existing files on your system when prompted. Say "no" and continue the install)
    # pkgadd -d libidn-1.8-sol10-x86-local
    # pkgadd -d libintl-3.4.0-sol10-x86-local
    # pkgadd -d curl-7.19.0-sol10-x86-local

    # export PATH=$PATH:/usr/local/bin

    It's recommended to install the lastest SWIG version (v.1.3.36) on Solaris from source
    (http://www.swig.org):

    # wget http://kent.dl.sourceforge.net/sourceforge/swig/swig-1.3.36.tar.gz
    # gunzip swig-1.3.36.tar.gz
    # tar xf swig-1.3.36.tar
    # cd swig-1.3.36
    # ./configure --prefix=/usr
    # make && make install
 
    Test if "swig" was correctly installed:
    # swig -version

    If this command complains about a missing "libgcc_s.so.1", here's a simple fix:
    # ln -sf /usr/local/lib/libgcc_s.so.1 /usr/lib/libgcc_s.so.1

    and try again:
    # swig -version



--------
Install
--------

Get a fresh copy of the library from subversion:

   svn checkout http://warc-tools.googlecode.com/svn/trunk/ warc-tools-read-only
   cd warc-tools-read-only

Compile the library with:

  $ make

or use "gmake" on FreeBSD, NetBSD or OpenBSD:

  $ gmake


---------
Optional
---------

The following UNIX commands are used in the "makefile" to build "optional
stuffs" (see below) and need to be present in your system (adjust your PATH
environment variable if necessary):


- bash again shell (bash)
- echo
- cat
- find
- grep
- sed
- gzip
- mkdir
- rm
- cp
- tar
- curl
- basename
- dirname
- unzip
- strip
- subversion client
- chmod
- perl (for contrib/httrack)
- python with development headers and libs (for Python-SWIG wrapper)
- ruby with development headers and libs (for Ruby-SWIG wrapper)
- java JDK (for Java wrapper)

* To start unit tests, type:

  $ make test

* To generate static library, type:

  $ make static

* To generate shared library, type:

  $ make shared

* To compile in release mode (no debug info included), type:

  $ make release

* To build a tarball version of the library, type:

  $ make tgz

* To install the library, as "root" type:

  # make install

* To de-install the library, as "root" type:

  # make deinstall

* To install the library on your local system under "/usr/local/warc-tools"
  type:

  $ su
  # make install

* To build an RPM or DEB package, you need to install the following
softwares first:

- dpkg:  http://en.wikipedia.org/wiki/Dpkg
- alien: http://kitenet.net/~joey/code/alien/

For a DEP package type (as a mortal user):

 $ make deb

For an RPM package type (as root):

 # make rpm

* To build the technical documentation (class structure and the user guide), 
  you have to install "Doxygen" from:
  http://www.stack.nl/~dimitri/doxygen

  You also need to install "docbook" & "docbook-utils":
  http://www.oasis-open.org/docbook/
  http://sources.redhat.com/docbook-tools/

Then, build it with:

 $ make doc

 But this step is option and the doc was already built for you.

* You need a "bash shell" to be able to use the following scripts:

app/arc2warc.sh
app/warcvalidator.sh

* To compute LOC statistics, you need to install "c_count" from:
  http://www.chris-lott.org/resources/cmetrics/

Then, type:

  $ ./misc/statistic.sh .

* To beautify C code, you need to install "astyle" from:
  http://sourceforge.net/projects/astyle/

Then, type:

  $ ./misc/beautifier.sh .


* The library is compiled with debugging symbols by default.
You can disable this feature by commenting the "makefile" line:

DFLAG	  = -g

like this:

#DFLAG	   = -g

---------------
IMPORTANT NOTE
--------------- 
The following application are not build under "MingW":
app/warcserver
app/warcclient


--------
Modules
--------

* Apache "mod_warc":

Follow the following steps to install the WARC library as an Apache plugin.

o Download and install the lastest stable version of Apache2:

 $ wget http://apache.multidist.com/httpd/httpd-2.0.63.tar.gz
 $ tar xzvf httpd-2.0.63.tar.gz
 $ cd httpd-2.0.63

o Compile Apache with any option you like. The most important thing is to enable
the support of DSO (Dynamic Shared Object) with "--enable-so":

 $ ./configure --prefix=/usr/local/apache2 \
	       --enable-so \
		   --enable-modules=all \
	       --enable-mods-shared=all \
	       --enable-ssl \
	       --enable-deflate \
	       --enable-proxy{,-connect,-ftp,-http} \
	       --enable{,-disk,-mem}-cache \
	       --with-mpm=prefork

The configure script may fail (ex. Ubuntu) because "/bin/sh"
doesn't point to the "Bourne Again Shell". Fix it like this as "root":

 # mv /bin/sh /bin/sh_old
 # ln -sf /bin/bash /bin/sh

o Compile and change to "root" user:

 $ make
 $ su

o Install Apache2 as root:

 # make install

All files will be copied under the "/usr/local/apache2" directory.

o For test purposes and to avoid collision with any running service
  on port "80", we'll use port number "9898" instead:

 # sed -i "s|Listen 80|Listen 9898|" /usr/local/apache2/conf/httpd.conf

o Now, test if the server with:

 #/usr/local/apache2/bin/apachectl -k start

o Point your favourite browser to the address:

 http://127.0.0.1:9898

o Stop the server:

 #/usr/local/apache2/bin/apachectl -k stop

o Compile and install the WARC tools library on your system:

 $ svn co http://warc-tools.googlecode.com/svn/trunk/ warc-tools-read-only
 $ cd warc-tools-read-only

o Change to "root" and install it under "/usr/local/warc-tools":

 $ su
 # make install

o Add the following line to your Apache2 configuration file and
  MAKE SURE IT'LL BE INCLUDED BEFORE THE "DSO section".

  # vi /usr/local/apache2/conf/httpd.conf
  LoadFile /usr/local/warc-tools/lib/libwarc.so

 The resulting configuration file needs to be like this:

...
LoadFile /usr/local/warc-tools/lib/libwarc.so

#
# Dynamic Shared Object (DSO) Support
#
# To be able to use the functionality of a module which was built as a DSO you
# have to place corresponding `LoadModule' lines at this location so the
# directives contained in it are actually available _before_ they are used.
# Statically compiled modules (those listed by `httpd -l') do not need
# to be loaded here.
#
# Example:
# LoadModule foo_module modules/mod_foo.so
#
...

o Install "mod_warc" as root:

 # make mod_apache_install

o Add the following Apache directives to the configuration file:

 # vi /usr/local/apache2/conf/httpd.conf

<Location /WARC/0.18/>
	warc_dir   "/tmp/"
	SetHandler warc
	Order Deny,Allow
	Deny from all
	Allow from 127.0.0.1
</Location>

o You can now test mod_warc and get data from server by typing the following url

  http://localhost:9898/(url in rest format).

  Url in rest format is described later in this document.


* Lighttpd "mod_cgi":

  Follow the following steps to install the WARC library as a CGI module 
  for Lighttpd Web server.

o Download and install the lastest stable version of Lighttpd 
  (and its dependencies: pcre, openssl ...):
  $ cd /tmp
  $ wget http://www.lighttpd.net/download/lighttpd-1.4.19.tar.gz
  $ tar xzvf lighttpd-1.4.19.tar.gz
  $ cd lighttpd-1.4.19
  $ ./configure --enable-maintainer-mode \
		        --prefix=/usr/local \
		        --enable-ipv6 \
		        --with-ldap \
	            --with-attr \
		        --with-openssl

  Install Lighttpd as root:

   # make
   # make install
   # mkdir -p /usr/local/etc
   # cp warc-tools-read-only/lib/private/plugin/lighttpd/lighttpd.conf \
     /usr/local/etc/
   # chmod 644 /usr/local/etc/lighttpd.conf
   # mkdir -p /var/www/{htdocs,logs}
   # mkdir -p /var/run
   # touch /var/run/lighttpd.pid
   # groupadd lighttpd
   # useradd -s /bin/false lighttpd -g lighttpd
   # touch /var/www/logs/access_log
   # touch /var/www/logs/error_log
   # chown lighttpd:lighttpd /var/www/logs/*

  Ubuntu/Debian users may prefer "apt-get":
  $ sudo apt-get install lighttpd

  Fedora/Redhat users may prefer "yum":
  $ sudo yum install lighttpd.i386

o Install lastest fastcgi (v2.4.0) as follow:
   $ cd /tmp
   $ wget http://www.fastcgi.com/dist/fcgi.tar.gz
   $ tar xzvf fcgi-2.4.0.tar.gz
   $ cd fcgi-2.4.0
   $ ./configure

   Now you can install fastcgi as root

   # make
   # make install
 
  Fastcgi is unstalled by default under "/usr/local" directory. Static and 
  dynamic library will be under "/usr/local/lib" and header files under 
  "/usr/local/include".

o Lighttpd server use by default the port number "3000". See your 
  "lighhtpd.conf" (under "/usr/local/etc" in our example) configuration 
  file and update it if necessary:

  server.port = 3000

  We'll leave this port number unchanged for the rest.

o To install warc-tools as CGI and FCGI module, type:

  $ cd warc-tools-read-only
   $ make mod_lighttpd

  You must copy the files "warc.cgi" and "warc.fcgi" to the directory 
  referenced by the variable:

  server.document-root 
  
  in "Lighttpd" configuration file "lighttpd.conf". On Debian/Ubuntu this 
  directory is usually "/var/www". Type:

  # cp lib/private/plugin/lighttpd/warc.cgi  /var/www
  # cp lib/private/plugin/lighttpd/warc.fcgi /var/www
  # chmod 777 /var/www

  Note: The last command (chmod 777 ...) is necessary as "warc-tools" needs
  to create a temporary file.

o To use warc-tools as "CGI", uncomment the following in your "lighttpd.conf":

   # vi /usr/local/etc/lighttpd.conf
   
   server.modules += ("mod_cgi")
   cgi.assign = ( ".cgi" => "")


o To use warc-tools as "FCGI", uncomment the following in your "lighttpd.conf":
  
  # vi /usr/local/etc/lighttpd.conf

  server.modules += ("mod_fcgi")

  fastcgi.server = ( ".fcgi" =>
     ((
       "host"     => "127.0.0.1",
       "port"     => 3000,
       "bin-path" => "/var/www/warc.fcgi"
     ))

o Start/Stop Lighttpd with:

   # /usr/local/sbin/lighttpd -f /usr/local/etc/lighttpd.conf
   # kill `cat /var/run/lighttpd.pid`

   If you have installed Lighttpd as a service "/etc/init.d/lighttpd",
   you can start/stop it with:

   # /etc/init.d/lighttpd start
   # /etc/init.d/lighttpd stop

 o Point your browser to:

   CFG:  http://localhost:3000/warc.cgi/(url in rest format).
   FCGI: http://localhost:3000/warc.fcgi/(url in rest format).

* Supported REST queries format:

  To retrieve information from a remote WARC file, we use the following 
  REST queries:

  (1) http://host:port/WARC/0.18/req_nat/offset/fname

   where:

   -  host and port: are the remote server host name (or IP address) 
      and port number

   -  WARC and 0.18: are constants which reference the WARC specification

   -  req_nat: is a parameter with 3 possible values:
       -> file: this tells the WARC server to return a WARC file starting 
          from a certain offset (offset equals to 0 means returns the 
          entire WARC file).
       -> record: this tell the WARC server to return a specific WARC record at
          a particular offset. The offset must corresponds to a valid 
          offset in the WARC file.
       

   -  offset: a positive integer position in a WARC file (previously described)

   -  fname: a WARC pathname file name on the server.

  (2) http://host:port/WARC/0.18/filter/offset/fileld_to_filter/value_filter/fname

   where:

   - filter_field: is the field name to filter on. Valid values are:
     -> uri
     -> contenttype
     -> recordtype
 
  - filter_string: a string to filter on

  (3) http://host:port/WARC/0.18/list/offset/outpout_format/fname

  where:

  - outpout_format: is the format of outpout with 4 possiblities:

    -> html
    -> xml
    -> json
    -> text
       

* Python wrapper:

You need to following packages installed:
 - pyhton 2.4.x or later (http://www.python.org/)
 - swig 1.3.36 at least (see above)

o When done, simply type:
  
  make python 

o Then, use the Python applications under "app/python":
  warcdump.py, arcdump.py, arc2warc.py ...




* Ruby wrapper:

You need to following packages installed:
 - ruby 1.8.x or later (http://www.ruby-lang.org/)
 - swig 1.3.36 at least (see above)

For Fedora guys, simply install:
yum install ruby ruby-devel rubygem

o When done, simply type:
  
  make ruby 

o Then, use the Python applications under "app/ruby":
  warcdump.rb




* Java wrapper:

Please, have a look to "contrib/java/install" file.



* JHOVE integration:

Please, have a look to "contrib/jhove/install" file.



* Man pages:

All the C commands (ex. arc2warc, warcvalidator ...) inside the "app"
directory are delivered with a UNIX man pages.

Type:

$ man app/man/arc2warc.man

